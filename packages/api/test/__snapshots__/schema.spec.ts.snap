// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exported schema 1`] = `
"enum Audiences {
  CUSTOMER
  STORE
}

type Bundle implements Node {
  nodeId: NodeId!
  items: BundleItemList!
}

input BundleInput {
  items: BundleItemInput!
}

type BundleItem {
  nodeId: NodeId!
  quantity: Float!
  price: Float!
  name: String!
  unit: String!
}

input BundleItemInput {
  nodeId: NodeId!
  quantity: Float!
}

type BundleItemList {
  \\"\\"\\"edges: [BundleItemEdge]!\\"\\"\\"
  nodes: [BundleItem]!
}

type BundleList {
  \\"\\"\\"edges: [BundleEdge]!\\"\\"\\"
  nodes: [Bundle]!
}

type Customer implements Node & User {
  nodeId: NodeId!
  type: Audiences!
}

type Mutation {
  \\"\\"\\"
  orderPickUp(pickUpCode: String!): Order # order status -> PICKED_UP (by ??)
  \\"\\"\\"
  orderDecline(nodeId: NodeId!): Order
  orderAccept(nodeId: NodeId!): Order
  orderPlace(order: OrderInput): Order
}

interface Node {
  nodeId: NodeId!
}

\\"\\"\\"serializes and deserialized nodeIds\\"\\"\\"
scalar NodeId

type Order implements Node {
  nodeId: NodeId!
  pickUpCode: String!
  confirmedPickUpTime: String
  requestedPickUpTime: String
  store: Store!
  customer: Customer!
  orderStatus: OrderStatus!
  bundles: BundleList!
  shareLink: String!
}

input OrderInput {
  bundles: [BundleInput!]!
  store: String!
  requestedPickUpTime: String
}

type OrderList {
  \\"\\"\\"edges: [OrderEdge]!\\"\\"\\"
  nodes: [Order]!
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  READY_FOR_PICKUP
  PICKED_UP
}

type Query {
  orders(audience: Audiences!, orderStatus: OrderStatus): OrderList
  order(audience: Audiences!, nodeId: NodeId!): Order
}

type Store implements Node & User {
  nodeId: NodeId!
  type: Audiences!
}

interface User {
  type: Audiences!
}
"
`;
